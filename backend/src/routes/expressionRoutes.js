


const express = require("express");
const { Op } = require("sequelize");
const { Expression } = require("../../models"); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å Expression

const router = express.Router();

// –ü–æ–ª—É—á–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
router.get("/expressions", async (req, res) => {
  try {
    console.log("üì• GET /api/expressions - –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π");

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    let { page, limit } = req.query;
    page = parseInt(page) || 1; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 1
    limit = parseInt(limit) || 10; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 10

    const offset = (page - 1) * limit; // –°–º–µ—â–µ–Ω–∏–µ

    // –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ —Å —É—á–µ—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    const expressions = await Expression.findAll({
      limit,
      offset,
    });

    console.log(`üì§ –ù–∞–π–¥–µ–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–π: ${expressions.length} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page})`);
    res.json(expressions);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–π:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –ü–æ–∏—Å–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–π
router.get("/expressions/search", async (req, res) => {
  try {
    const { query } = req.query;
    console.log(`üì• GET /api/expressions/search?query=${query} - –ü–æ–∏—Å–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–π`);
    if (!query) {
      console.log("‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å");
      return res.json([]);
    }

    const expressions = await Expression.findAll({
      where: {
        [Op.or]: [
          { english: { [Op.iLike]: `%${query}%` } },
          { russian: { [Op.iLike]: `%${query}%` } },
        ],
      },
    });

    console.log("üì§ –ù–∞–π–¥–µ–Ω–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–π:", expressions.length);
    res.json(expressions);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:", error);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

module.exports = router;













// const express = require("express");
// const db = require("../../models"); // ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
// const router = express.Router();

// console.log("üü¢ –í—Å–µ –º–æ–¥–µ–ª–∏:", Object.keys(db)); // üîç –õ–æ–≥–∏—Ä—É–µ–º, –∫–∞–∫–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã

// const Expression = db.Expression; // ‚úÖ –ë–µ—Ä–µ–º –º–æ–¥–µ–ª—å Expression
// if (!Expression) {
//   console.error("‚ùå –ú–æ–¥–µ–ª—å Expression –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å –∏ —ç–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏.");
// }

// router.get("/expressions", async (req, res) => {
//   try {
//     console.log("üì• –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π");
//     const expressions = await Expression.findAll();
//     res.json(expressions);
//   } catch (error) {
//     console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–π:", error);
//     res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
//   }
// });

// module.exports = router;

