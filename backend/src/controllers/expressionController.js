const Expression = require("../models/Expression");

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
exports.getAllExpressions = async (req, res) => {
  try {
    const { page = 1, limit = 10, sort = "english" } = req.query;

    const offset = (page - 1) * limit;
    const expressions = await Expression.findAll({
      order: [[sort, "ASC"]],
      limit: parseInt(limit),
      offset: parseInt(offset),
    });

    res.json(expressions);
  } catch (error) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–æ ID
exports.getExpressionById = async (req, res) => {
  try {
    const { id } = req.params;
    const expression = await Expression.findByPk(id);

    if (!expression) {
      return res.status(404).json({ error: "–í—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
    }

    res.json(expression);
  } catch (error) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// üìå –ü–æ–∏—Å–∫ –≤—ã—Ä–∞–∂–µ–Ω–∏–π –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É –∏–ª–∏ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É
exports.searchExpressions = async (req, res) => {
  try {
    const { query } = req.params;
    const expressions = await Expression.findAll({
      where: {
        [Op.or]: [
          { english: { [Op.iLike]: `%${query}%` } },
          { russian: { [Op.iLike]: `%${query}%` } },
        ],
      },
    });

    res.json(expressions);
  } catch (error) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};
